plugins {
    id 'nebula.optional-base' version '3.0.3' // if you want optional-base
    id 'nebula.provided-base' version '3.0.3' // if you want provided-base
}

group 'com.github.p4535992'
version '1.6.8'

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'maven-publish'
/*https://github.com/nebula-plugins/gradle-extra-configurations-plugin*/
apply plugin: 'nebula.optional-base'

publishing {
    publications {
        //myPublicationName(MavenPublication) {
        maven(MavenPublication) {
            groupId 'com.github.p4535992'
            artifactId 'database-basic'
            version '1.6.8'
            from components.java
        }
    }
}


compileJava {
    // This only works when forking and passing 'javac' as an executable
    options.compilerArgs << '-XDignore.symbol.file'
    options.fork = true
    options.forkOptions.executable = 'javac'
}

javadoc {
    // These get ignored
    // options.addStringOption('XDignore.symbol.file', null)
    // options.addStringOption('XDignore.symbol.file')

    // This one fails build - I am assuming it's trying to parse ''
    // options.addStringOption('XDignore.symbol.file')

    // This works, but it's an ugly hack
    options.addStringOption('XDignore.symbol.file', '-quiet')
    options.addStringOption("sourcepath", "")
}

allprojects {
    /*tasks.withType(Compile).allTasks { Compile compile ->
        compile.options.debug = true
        compile.options.compilerArgs = ['-Xlint:all']
    }*/
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << '-Xlint:all'
    }
}

project.tasks.withType(Javadoc) {
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

mainClassName = "com.github.p4535992.database.home.TestMain"
sourceCompatibility = '1.7'
targetCompatibility = '1.7'

//dependencies versions
//project.ext.set(
//ext is shorthand for project.ext
/*ext {
    ver = [
            slf4jVersion = '1.7.14',
            springFrameWorkVersion = '4.2.4.RELEASE'
    ]
}*/
ext.githubProjectName = 'database-basic'
ext.slf4jVersion = '1.7.14'
ext.springFrameWorkVersion = '4.2.4.RELEASE'
ext.p4535992UtilityVersion = '1.6.8-SNAPSHOT'

allprojects {
    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots'} /*univocity parsers snapshot*/
        maven { url 'http://maven.aksw.org/archiva/repository/internal'} /*Jena-Virtuoso driver mirror 1*/
        maven { url 'http://maven.aksw.org/archiva/repository/snapshots'} /*Jena-Virtuoso driver mirror 2*/
        maven { url 'http://mvn.linkeddata.org/content/groups/linkeddata.org/'} /*Sesame-Virtuoso mirror 3*/
    }
}


dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.11'
    compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
    /* =============   */
    /* SPRINGFRAMEWORK */
    /* =============   */
    compile(
            [group:'org.springframework',name:'spring-jdbc',version: springFrameWorkVersion],
            [group:'org.springframework',name:'spring-core',version: springFrameWorkVersion],
            [group:'org.springframework',name:'spring-context',version: springFrameWorkVersion],
            [group:'org.springframework',name:'spring-web',version: springFrameWorkVersion],
            [group:'org.springframework',name:'spring-orm',version: springFrameWorkVersion],
    )

    /* ============= */
    /* JOOQ          */
    /* ============= */
    compile(
            ['org.jooq:jooq:3.7.2'],
            ['org.jooq:jooq-meta:3.7.2'],
            ['org.jooq:jooq-codegen:3.7.2']
    )
    compile  group:'com.github.p4535992',name:'utility',version: p4535992UtilityVersion

/*    compile 'javax.persistence:persistence-api:1.0'
    compile 'org.apache.commons:commons-lang3:3.4'*/
   /* compile 'com.fasterxml.jackson.core:jackson-core:2.7.0'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.7.0'*/

    compile 'mysql:mysql-connector-java:5.1.38'


    compile 'com.jolbox:bonecp:0.8.0.RELEASE'
    compile 'com.github.uniVocity:univocity-parsers:-SNAPSHOT'
    /* ============= */
    /* HIBERNATE     */
    /* ============= */
    compile(
            ['org.hibernate:hibernate-core:5.0.7.Final'],
            /* for JPA, use hibernate-entitymanager instead of hibernate-core */
            ['org.hibernate:hibernate-entitymanager:5.0.7.Final'],
            /* optional dependency */
            ['org.hibernate:hibernate-osgi:5.0.7.Final'],
            ['org.hibernate:hibernate-envers:5.0.7.Final'],
            ['org.hibernate:hibernate-c3p0:5.0.7.Final'],
            ['org.hibernate:hibernate-proxool:5.0.7.Final'],
            ['org.hibernate:hibernate-infinispan:5.0.7.Final'],
            ['org.hibernate:hibernate-ehcache:5.0.7.Final'],
            ['org.hibernate:hibernate-validator:5.3.0.Alpha1'],
            /* Support Hibernate and javax.persistence */
            ['org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final'],
            ['org.eclipse.persistence:eclipselink:2.5.1'],
            ['org.eclipse.persistence:javax.persistence:2.0.0'],
            /* support time on hibernate */
            ['joda-time:joda-time:2.9.2'],
            /*  To map JodaTime with database type */
            ['org.jadira.usertype:usertype.core:5.0.0.GA']
    )
    testCompile group: 'junit', name: 'junit', version: '4.11'

}
/*We also add a distribution, that gets shipped to the client:*/
task dist(type: Zip) {
    dependsOn jar
    from 'src/dist'
    into('libs') {
        from jar.archivePath
        from configurations.runtime
    }
}







