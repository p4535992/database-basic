package com.github.p4535992.database.datasource.database.performance;

import java.sql.*;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

public class ConnectionWrapper implements Connection
{
  protected Connection realConnection;

  public Connection realConnection () {
    return realConnection;
  }

  public ConnectionWrapper (Connection connection) {
    realConnection = connection;
  }

  @Override
  public Statement createStatement() throws SQLException {
    return new StatementWrapper(realConnection.createStatement(), this);
  }

  @Override
  public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
    return new StatementWrapper(realConnection.createStatement(resultSetType, resultSetConcurrency), this);
  }

  @Override
  public CallableStatement prepareCall(String sql) throws SQLException {
    return new CallableStatementWrapper(realConnection.prepareCall(sql), this, sql);
  }

  @Override
  public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
    return new CallableStatementWrapper(realConnection.prepareCall(sql, resultSetType, resultSetConcurrency), this, sql);
  }

  @Override
  public PreparedStatement prepareStatement(String sql) throws SQLException {
    return new PreparedStatementWrapper(realConnection.prepareStatement(sql), this, sql);
  }

  @Override
  public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
    return new PreparedStatementWrapper(realConnection.prepareStatement(sql, resultSetType, resultSetConcurrency), this, sql);
  }

  @Override
  public DatabaseMetaData getMetaData() throws SQLException {
    return new DatabaseMetaDataWrapper(realConnection.getMetaData(), this);
  }




  @Override
  public void clearWarnings() throws SQLException {
    realConnection.clearWarnings();
  }

  @Override
  public void close() throws SQLException {
    realConnection.close();
  }

  @Override
  public void commit() throws SQLException {
    realConnection.commit();
  }

  @Override
  public boolean getAutoCommit() throws SQLException {
    return realConnection.getAutoCommit();
  }

  @Override
  public String getCatalog() throws SQLException {
    return realConnection.getCatalog();
  }

  @Override
  public int getTransactionIsolation() throws SQLException {
    return realConnection.getTransactionIsolation();
  }

  @Override
  public Map<String,Class<?>> getTypeMap() throws SQLException {
    return realConnection.getTypeMap();
  }

  @Override
  public void setHoldability(int holdability) throws SQLException {

  }

  @Override
  public int getHoldability() throws SQLException {
    return 0;
  }

  @Override
  public Savepoint setSavepoint() throws SQLException {
    return null;
  }

  @Override
  public Savepoint setSavepoint(String name) throws SQLException {
    return null;
  }

  @Override
  public void rollback(Savepoint savepoint) throws SQLException {

  }

  @Override
  public void releaseSavepoint(Savepoint savepoint) throws SQLException {

  }

  @Override
  public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
    return null;
  }

  @Override
  public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
    return null;
  }

  @Override
  public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
    return null;
  }

  @Override
  public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
    return null;
  }

  @Override
  public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
    return null;
  }

  @Override
  public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
    return null;
  }

  @Override
  public Clob createClob() throws SQLException {
    return null;
  }

  @Override
  public Blob createBlob() throws SQLException {
    return null;
  }

  @Override
  public NClob createNClob() throws SQLException {
    return null;
  }

  @Override
  public SQLXML createSQLXML() throws SQLException {
    return null;
  }

  @Override
  public boolean isValid(int timeout) throws SQLException {
    return false;
  }

  @Override
  public void setClientInfo(String name, String value) throws SQLClientInfoException {

  }

  @Override
  public void setClientInfo(Properties properties) throws SQLClientInfoException {

  }

  @Override
  public String getClientInfo(String name) throws SQLException {
    return null;
  }

  @Override
  public Properties getClientInfo() throws SQLException {
    return null;
  }

  @Override
  public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
    return null;
  }

  @Override
  public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
    return null;
  }

  @Override
  public void setSchema(String schema) throws SQLException {

  }

  @Override
  public String getSchema() throws SQLException {
    return null;
  }

  @Override
  public void abort(Executor executor) throws SQLException {

  }

  @Override
  public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {

  }

  @Override
  public int getNetworkTimeout() throws SQLException {
    return 0;
  }

  @Override
  public SQLWarning getWarnings() throws SQLException {
    return realConnection.getWarnings();
  }

  @Override
  public boolean isClosed() throws SQLException {
    return realConnection.isClosed();
  }

  @Override
  public boolean isReadOnly() throws SQLException {
    return realConnection.isReadOnly();
  }

  @Override
  public String nativeSQL(String sql) throws SQLException {
    return realConnection.nativeSQL(sql);
  }

  @Override
  public void rollback() throws SQLException {
    realConnection.rollback();
  }

  @Override
  public void setAutoCommit(boolean autoCommit) throws SQLException {
    realConnection.setAutoCommit(autoCommit);
  }

  @Override
  public void setCatalog(String catalog) throws SQLException {
    realConnection.setCatalog(catalog);
  }

  @Override
  public void setReadOnly(boolean readOnly) throws SQLException {
    realConnection.setReadOnly(readOnly);
  }

  @Override
  public void setTransactionIsolation(int level) throws SQLException {
    realConnection.setTransactionIsolation(level);
  }

  @Override
  public void setTypeMap(Map<String,Class<?>> map) throws SQLException {
    realConnection.setTypeMap(map);
  }

  @Override
  public <T> T unwrap(Class<T> iface) throws SQLException {
    return null;
  }

  @Override
  public boolean isWrapperFor(Class<?> iface) throws SQLException {
    return false;
  }
}
